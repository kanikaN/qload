<?php
/**
Class for halding the Output generated by FFMPEG
*/
class FFMPEG_Output_parser {
 	 
 	 protected $output = null;
 	 protected $processingLineIdx = 0;
 	 protected $outputLineCount = 0;
 	 protected $result = array();
 	 protected $frameWidth = 0;
 	 protected $frameHeight = 0;
 	 function __construct($output) {
 	 	 
 	 	 $this->output = $output;
 	 	 $this->processingLineIdx = 0;
 	 	 $this->outputLineCount = count($output);
 	 }
 
 	 protected function parseOutput(&$result,$indent ) {
 	 	 //	echo "\n>>$indent - $idx  \n";
		$key = 'Input';
		$val = '';
		
		while($this->processingLineIdx < $this->outputLineCount ){
			
			$line = $this->output[$this->processingLineIdx];
			$pattern = "/([\s]*)([^:]*):*[\s]*(.*)/";
			preg_match($pattern, $line,$match);
			$currIndent = strlen($match[1]);
			if ($currIndent > $indent) {
				$newRow = array('row_value'=> $val);
				$this->parseOutput($newRow,$currIndent);
				$result[$key] = $newRow;
			} 
			if ($currIndent < $indent) {
				break;
			} 
			if ($currIndent == $indent) {
				$nkey = trim($match[2]);
				if ($nkey == 'Metadata') {
					$key = $key."_Metadata";
				} else {
					$key = $nkey;
				}
				$val = trim(@$match[3]);
				if (stripos($key,"Stream #") !== FALSE ) {
					if( stripos($val,"Video") !== FALSE) {
						$key = "Video_Stream";
						$val = $this->parseVideoParams($val);
						
					} else if (stripos($val,"Audio") !== FALSE) {
						$key = "Audio_Stream";
					}
				}
				$result[$key] = $val;
				$this->processingLineIdx++;
			} 
	    }
	    
	 }
	 /**
	 Parses the video parameters to get informaiton about video stream
	 */
	
	 protected function parseVideoParams($value) {
		//Video: mpeg4, yuv420p, 190x240 [PAR 1:1 DAR 19:24], 341 kb/s, 30 fps, 30 tbr, 30 tbn, 1k tbc
		$res =  explode(",",$value);
		preg_match("/([^xX]+)[xX]([^ ]*)/",$res[2],$match);
		$this->frameWidth = intval(trim($match[1]));
		$this->frameHeight = intval(trim($match[2]));
		return $res;
	 }
	 
	 public function getInfo() {
		$this->result = array();
		while($this->processingLineIdx < $this->outputLineCount ) {
			$line  = $this->output[$this->processingLineIdx];
			$this->processingLineIdx++;
			if (strpos($line,'Input') !== FALSE) {
			 	 $this->parseOutput($this->result,0);
			 	 break;
			 }
			 
		}
		return $this->result;
	 }
	 public function getResult() {
	 	 return $this->result;
	 }
	
	 public function getFrameWidth() {
	 	return $this->frameWidth;
		
	 }
	 public function getFrameHeight() {
	 	return $this->frameHeight;
	 }

	 public function getAspectRatio() {
	 	return (float) ($this->frameWidth/ $this->frameHeight);
	 }
	
	 public function getRawOutput() {
	 	 return $this->output;
	 }
 }
/**

*/
class Model_Service_FFMPEG
{
	var $fileName;
	var $ffmpegDir	= "/usr/bin/ffmpeg";
	var $mencoder		= "/home/usr/local/bin/mencoder ";
	var $outputPath;
	var $orientation;
	var $fileInfo;
	
	var $info_parser = null;
	var $output_str = '';

	/**
	intializes the service with the file input
	*/
	function __construct($fileName,$fileOrientation=0) {
		$this->fileName		= $fileName;
		$this->orientation	= $fileOrientation;
		$this->get_file_info();
	}
	/**
	Executes the command for showing the output
	*/
	protected function execute_command($command, $fake = false) {
		$this->output_str .= "\n".$command." \n";
		$output = array();
		if (!$fake) {
			exec($command." 2>&1",$output,$error);
			$this->output_str .= print_r($output,true);
			$this->output_str .= print_r($error,true);
		}
		return $output;
	}
	
	function transcode_audio($out_file,$config) {
		$result = true;
		$command  = $this->ffmpegDir." -y -i ".$this->fileName
		." -acodec libmp3lame -ab ".$config['bit_rate']."k ".$out_file;
		$this->execute_command($command);
        return $result;
		
	}
	 /**
	 Based on the input requriements decides on the padding and target width 
	 and height of the generated video
	 */
    public function get_target_size_attributes($item , $required) {
    	
    	$ar = $item['width'] / $item['height'];
		$item['req'] = $required['width'] / $required['height'];
		$item['ar'] = $ar;
		
		$item['nw'] = 0;
		$item['nh'] = 0;
		$item['pt'] = 0;
		$item['pl'] = 0;
		$item['tw'] =  $required['width'];
		$item['th'] =  $required['height'];
		
    	if ($item['req'] <= $ar) {
			$item['nw'] = $required['width'] ;
			$item['nh'] = round($item['nw'] /$ar);
			if ($item['nh'] < $required['height']) {
				$item['pt'] = floor(($required['height'] - $item['nh'])/2);
			} 
		} else {
			$item['nh'] = $required['height'];
			$item['nw'] = round($item['nh'] *$ar);
			if ($item['nw'] < $required['width']) {
				$item['pl'] = floor(($required['width'] - $item['nw'] )/2);
			} 
		}
		return $item;
    }
    
	/**
	Transcodes the Video based on the user presets
	
	High quality 2 Pass
	
	ffmpeg -y -i INPUT -r 30000/1001 -b 2M -bt 4M -vcodec libx264 -pass 1 -vpre fastfirstpass -an output.mp4
	ffmpeg -y -i INPUT -r 30000/1001 -b 2M -bt 4M -vcodec libx264 -pass 2 -vpre hq -acodec libfaac -ac 2 -ar 48000 -ab 192k output.mp4
	
	iPod-iPhone 320 width
	
	ffmpeg -i INPUT -s 320x240 -r 30000 -b 200k -bt 240k -vcodec libx264 -vpre ipod320 -acodec libfaac -ac 2 -ar 48000 -ab 192k output.mp4
	
	iPod-iPhone 640 width
	
	ffmpeg -i INPUT -s 640x480 -r 30000/1001 -b 200k -bt 240k -vcodec libx264 -vpre ipod640 -acodec libfaac -ac 2 -ar 48000 -ab 192k output.mp4
	
	Hight quality, 2 pass without presset
	
	ffmpeg -y -i input -r 24000/1001 -b 6144k -bt 8192k -vcodec libx264 -pass 1 -flags +loop -me_method dia -g 250 -qcomp 0.6 -qmin 10 -qmax 51 -qdiff 4 -bf 16 -b_strategy 1 -i_qfactor 0.71 -cmp +chroma -subq 1 -me_range 16 -coder 1 -sc_threshold 40 -flags2 -bpyramid-wpred-mixed_refs-dct8x8+fastpskip -keyint_min 25 -refs 1 -trellis 0 -directpred 1 -partitions -parti8x8-parti4x4-partp8x8-partp4x4-partb8x8-an output.mp4
	
	ffmpeg -y -i input -r 24000/1001 -b 6144k -bt 8192k -vcodec libx264 -pass 2 -flags +loop -me_method umh -g 250 -qcomp 0.6 -qmin 10 -qmax 51 -qdiff 4 -bf 16 -b_strategy 1 -i_qfactor 0.71 -cmp +chroma -subq 8 -me_range 16 -coder 1 -sc_threshold 40 -flags2 +bpyramid+wpred+mixed_refs+dct8x8+fastpskip -keyint_min 25 -refs 4 -trellis 1 -directpred 3 -partitions +parti8x8+parti4x4+partp8x8+partb8x8-acodec libfaac -ac 2 -ar 44100 -ab 128k output.mp4
	
	iPod-iPhone 320 width, without presset
	
	ffmpeg -i INPUT -s 320x240 -r 30000/1001 -b 200k -bt 240k -vcodec libx264 -coder 0 -bf 0 -flags2 -wpred-dct8x8 -level 13 -maxrate 768k -bufsize 3M-acodec libfaac -ac 2 -ar 48000 -ab 192k output.mp4
	
	iPod-iPhone 640 width, without presset
	
	ffmpeg -i INPUT -s 320x240 -r 30000/1001 -b 200k -bt 240k -vcodec libx264 coder 0 -bf 0 -refs 1 -flags2 -wpred-dct8x8 -level 30 -maxrate 10M -bufsize 10M-acodec libfaac -ac 2 -ar 48000 -ab 192k output.mp4
	
	iPod-iPhone, 2 pass custom
	
	ffmpeg -y -i input -r 30000/1001 -s 480x272 -aspect 480:272 -vcodec libx264 -b 512k -bt 1024k -maxrate 4M -flags +loop -cmp +chroma -me_range 16 -g 300 -keyint_min 25 -sc_threshold 40 -i_qfactor 0.71 -rc_eq "blurCplx^(1-qComp)" -qcomp 0.6 -qmin 10 -qmax 51 -qdiff 4 -coder 0 -refs 1 -bufsize 4M -level 21 -partitions parti4x4+partp8x8+partb8x8 -subq 5 -f mp4 -pass 1 -an -title "Title" output.mp4
	
	ffmpeg -y -i input -r 30000/1001 -s 480x272 -aspect 480:272 -vcodec libx264 -b 512k -bt 1024k -maxrate 4M -flags +loop -cmp +chroma -me_range 16 -g 300 keyint_min 25 -sc_threshold 40 -i_qfactor 0.71 -rc_eq "blurCplx^(1-qComp)" -qcomp 0.6 -qmin 10 -qmax 51 -qdiff 4 -coder 0 -refs 1 -bufsize 4M -level 21 -partitions parti4x4+partp8x8+partb8x8 -subq 5 -f mp4 -pass 2 -acodec libfaac -ac 2 -ar 44100 -ab 128k -title "Title" output.mp4
	
	
	*/
	function transcode_video($outFileName,$preset)
	{
		$width = $preset['width'];
		$height = $preset['height'];
		
		$input['width'] = $this->info_parser->getFrameWidth();
		$input['height'] = $this->info_parser->getFrameHeight();
		
		$res = $this->get_target_size_attributes($input,$preset);
	
		$size = $res['nw']."x".$res['nh'];
		
		/**
		 * FFmpeg Commands Used
		 * -i 		==> inpt file
		 * -acodec	==> Audio codec
		 * -ar		==> Audio Samplerate
		 * -ab		==> Audio Bitrate
		 * -r		==> Videoo Framerate (default  25)
		 * -b		==> Video Bitrate	(default 200000)
		 * -f 		==> Output format
		 * -s		==> Width X Height / Aspect ratio
		 */
		 $result = true;
		if($this->orientation == 1) {
			$mEncode	= $this->mencoder." ".$this->fileName." -of lavf -oac lavc  -ovc lavc -lavcopts acodec=mp2:abitrate=64:vcodec=flv:vbitrate=50:mbd=0:mv0:trell:v4mv:cbp:last_pred=3 -vf scale=176:122,rotate=1 -srate 22050 -nosound -o ".$outFileName;
			exec($mEncode);
		} else {
			
			$command = 	$command = $this->ffmpegDir." -y -i \"".$this->fileName."\""
			." -s $size"
			." -acodec libmp3lame"
			." -ar 44000 -ab 128K -ac 2 -r 25"
			." -vb 8000K"
			." -vf pad={$res['tw']}:{$res['th']}:{$res['pl']}:{$res['pt']}";
			
			if ($preset['mime'] ==  'video/x-flv') {
				$command .= " -f flv ";
			} else if ($preset['mime'] == 'video/mp4') {
				$command .= '  -vcodec libx264  ';
			} else {
				return false;
			}
			$command .= "'$outFileName'";
			$output = $this->execute_command($command);
			
			if (empty($output) ) {
				$result = false;
			}
			
			if ($result) {
				$service = new Model_Service_FFMPEG($outFileName);
				$this->output_str .= $service->output_str;
				if ($service->info_parser->getFrameWidth() == 0) {
					$result = false;
				}
			} else {
				$this->output_str .= "\nError detected while processing";
			}
		}
		return $result;
	}

	/**
	Grab a thumbnail from the stream with the given width and height
	*/
	function grab_thumbnail_width_height($outFileName,$width,$height)
	{
		$ar = $this->info_parser->getAspectRatio();
		if ($height == null && $width != null) {
			$height = ceil($width/$ar);
		} else if ($width == null && $height != null) {
			$width = ceil($ar * $height);
		}
		$size = $width. "x".$height;
		$time = "00:00:03";
		$command  = $this->ffmpegDir." -y -i ".$this->fileName." -vframes 1 -ss $time -s $size -f image2 ".$outFileName;
		$this->execute_command($command);
        return $this;
	}
	
	/**
	Returns informaiton about a file
	*/
	function get_file_info() {
	
		if ($this->info_parser) {
			return;
		}
		$command = $this->ffmpegDir." -i ".$this->fileName;
		$output = $this->execute_command($command);
		$this->info_parser = new FFMPEG_Output_parser($output);
		$result = $this->info_parser->getInfo();
	}
}
