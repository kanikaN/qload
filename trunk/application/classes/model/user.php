<?php 

require_once Kohana::find_file('vendor', 'mailer/AmazonSESMailer');
/**
Model for hanlding various user related actions in the system
*/
class Model_User extends Model_Base {
	
	const STATUS_APPLIED = 'APPLIED';
	const STATUS_ACTIVATED  = 'ACTIVATED';
	const STATIS_BLOCKED = 'BLOCKED';
	
	/**
	Overriding the name field
	*/
	
	protected $_name_field = 'email';
    
	var $channel_name = 'Nothing';
    
    public function formo() {
        return array
        (
            'id' => array
            (
                'render' => false
            ),
        );
    }
    /**
	Model Validation rules , 
	lambda functions are used to validate uniqueness of username and
	email id . Fromo - got some issues when saving content from the admin
	panel . the ":model" string check is for handling cases generated by fromo.
	*/  
    public function rules() {
		return array(
			'username' => array(
				// Uses Valid::not_empty($value);
				array('not_empty'),
				array('regex', array(':value', '/^[a-z0-9_.]++$/iD')),
				array(function($value,  $model, $validation)
				{
					  if ($model == ':model') {
						  return;
					  }
					  $exist = ORM::factory('user')
						->where('username', '=', $value)
						->find();
						if (empty($model->id)) {
							if ($exist->loaded()) {
								$validation->error('username', 'unique_username');
							}
						}else if ($model->id != $exist->id) {
							$validation->error('username', 'unique_username');
						}
					 
				}, array(':value', ':model' , ':validation')),
			 ),
			'email' => array(
				array('not_empty'),
				array('email'),
				array(function($value,  $model, $validation)
				{
					  if ($model == ':model') {
						  return;
					  }
					  $exist = ORM::factory('user')
						->where('email', '=', $value)
						->find();
						
						if (empty($model->id)) {
							if ($exist->loaded()) {
								$validation->error('email', 'unique_email');
							}
						}else if ($model->id != $exist->id) {
							//$validation->error('email', 'unique_email');
						}
					 
				}, array(':value', ':model' , ':validation')),
			 ),
			'city' => array(
			array('not_empty')
							),
			
			'state' => array(
			array('not_empty')
							),
			'dob' => array(
			array('not_empty')
							),
			
			'first_name' => array(
			array('not_empty')
							),
			'last_name' => array(
			array('not_empty')
			)
		);
    }
    
    /**
    Reset  password function
    1. we check whether the user is active in the system then generate 
    	the reset token and send the user an email with the password reset token
    2. If the user is not Activated in the system respond back with error
    3. If user is not registered in the system respond back with error message
    */
    
    public static function reset_password() {
    	$user = ORM::factory('user')
        	->where('email','=',@$_POST['email'])
        	->find();
      
		$info_message = null;
		$error_message = null;
		 	
		if ($user->loaded()) {
			if ($user->status == Model_User::STATUS_ACTIVATED) {
				$user->send_password_reset_email();
				$info_message = "A password reset email is sent to you";
			} else {
				$error_message = "Your Account is not Active Yet";
			}
		} else {
			$error_message = "email id not registered with Qyuki";
		}
		return 	array(
			"error_message" => $error_message ,
			"info_message" => $info_message
		);
    }
    /**
    Authenticate a user and initialize the session
    */
    public static function authenticate($data,$controller) {
    	$email = $data['email'];
    	$user = ORM::factory('user')
    	->where('email','=',$email)
    	->and_where("password","=", md5($data['password']))
    	->find();
    	
    	if ($user->loaded()) {
    		Session::instance()->set("user_id",$user->id);
    		return true;
    	}
    	return false;
    }
    /**
    Sends emails to using  various templates
    */
    protected function send_email( $subject ,$template ='registration') {
    	$view = new View("email/".$template);
		$view->bind('context_user',$this);
		$mailer = new AmazonSESMailer('AKIAJK43Z3GIIF3XRIJQ', 'z1ZdTXoiNY1/I/JJmyVXfR9mU93kuq5Oo4vjW4cw');
		$mailer->AddAddress($this->email);
		
		$mailer->Subject = $subject;
		$mailer->SetFrom('noreply@qyuki.com');
		$mailer->MsgHtml($view->render());
		$mailer->Send();
    }
    /**
    Sends the activation email - changes the users status as activated
    */
    public function activate_email() {
    	
		
    	$this->status = self::STATUS_ACTIVATED;
		$this->modified_at = time();
		$this->reset_token = md5(time()."".$this->id."-".$this->email);
		
		try {
			$this->save();
		} catch (ORM_Validation_Exception $e) {
			$errors = $e->errors('models');
		}
		$this->send_email("Welcome to Qyuki",'activation');
		
    }
    /**
    sends a password reset email to a user
    */
    public function send_password_reset_email($subject = 'Qyuki Early Birds Activation Email') {
		$this->status = self::STATUS_ACTIVATED;
		$this->modified_at = time();
		$this->reset_token = md5(time()."".$this->id."-".$this->email);
		try {
			$this->save();
		} catch (ORM_Validation_Exception $e) {
			$errors = $e->errors('models');
		}
		$view = $this->send_email( "Struggling with your password ?",'password_reset');
    }
    /**
    Edit the user data based on the $_POST and $_FILE variables
    */
    public function edit($data) {
    
    	$errors = array();
    	$this->first_name = $data['first_name'];
		$this->last_name = $data['last_name'];
		$this->state = $data['state'];
		$this->city = $data['city'];
		$this->myself = @$data['myself'];
		
		if (isset($_FILES['content_file']) 
    	   	   	&& $_FILES['content_file']['size'][0] > 0) {
		   $locker = new Model_Locker($this);
		   $list =  $locker->add_file_content($_FILES,$_REQUEST,$errors);
		   if (count($list) >0) {
		   	   	$this->profile_pic = $list[0]->file_path;
		   	   	
		   	   	$this->profile_pic_id = $list[0]->id;
		   }
	   }
		
		if (isset( $data['profile_pic'])) {
			$this->profile_pic = $data['profile_pic'];
		}
		if ($data['password'] == $data['confirm_password'] && 
			$data['password'] != '' ) {
			$this->password = md5($data['password']);	
			
			Session::instance()->delete("should_reset_password");
			
		} else if( $data['password'] != '') {
			$errors['password'] = 'The passwords you entered do not match.';
			$errors['confirm_password'] = 'The passwords you entered do not match.';
		}
		
		try {
			$this->save();
		} catch (ORM_Validation_Exception $e) {
			$e2 = $e->errors('models');
			array_merge($errors,$e2);
		}
		return $errors;
    	
    }
    
    /**
    Creates a new user in the system and send the welcome email
    */
 
	public static function add_new_user($data , $controller) {
		$errors = array();
		try {
			if (!isset($data['tos'])) {
				$error['tos'] = 'Please agree to the TOS';
				return $error;
			}
			
			$user = ORM::factory('user');
		
			$user->email = @$data['email'];
			$user->username = @$data['username'];
			$user->first_name = @$data['first_name'];
			$user->last_name = @$data['last_name'];
			$user->city = @$data['city'];
			$user->state = @$data['state'];
			$user->gender = @$data['gender'];
			$user->dob = @$data['dob'];
			$user->status = self::STATUS_APPLIED;
			$user->created_at = time();
			$user->modified_at = time();
			$user->reset_token = md5(time() * rand(0,100));
			
			if ($controller->channel) {
				$user->channel_id = $controller->channel->id;
			}
			
			$user->save();
			if ($controller->channel) {
				$new_user = ORM::factory("user",$user->id);
				$new_user->status = self::STATUS_ACTIVATED;
				$new_user->modified_at = time();
				$new_user->reset_token = md5(time()."".$new_user->id."-".$new_user->email);
				$new_user->save();
				$new_user->send_email("Welcome to Qyuki",'single_activation');
				$controller->show_error_message("Hurray! Your Profile has been created. Please check your email to activate your account.");
            	
			} else {
				$controller->show_error_message("Hurray! Your Profile has been created. You will get an activation e-mail shortly.");
        		$user->send_email("Hello from Qyuki",'registration');
			}
			//$controller->show_info_message("Profile Successfully Created, You will receive an activation e-mail shortly");
			
		} catch (ORM_Validation_Exception $e) {
			$errors = $e->errors('models');
		}
		return $errors;
    }
    
}
